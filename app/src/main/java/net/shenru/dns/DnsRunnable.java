package net.shenru.dns;

import java.io.IOException;
import java.math.BigInteger;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by xtdhwl on 3/8/17.
 */
//echo "hello" > /dev/udp/localhost/5300
//iptables -t nat -I PREROUTING  -p udp --dport 53 -j DNAT --to-destination 192.168.43.1:5300
//iptables -t nat -I PREROUTING  -p tcp --dport 53 -j DNAT --to-destination 192.168.43.1:5300


public class DnsRunnable implements Runnable {

    private static char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7',
            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    private DatagramSocket socket;

    private boolean isRunging = false;

    @Override
    public void run() {
        try {
            isRunging = true;
            receive();
        } catch (IOException e) {
            e.printStackTrace();
            isRunging = false;
        }

    }

    public void stopReceive() {
        isRunging = false;
        if (socket != null) {
            socket.disconnect();
            socket.close();
        }
    }


    private void receive() throws IOException {
        socket = new DatagramSocket(5300);
        while (isRunging) {
            byte[] buf = new byte[1024];
            DatagramPacket packet = new DatagramPacket(buf, 1024);
            socket.receive(packet);
            byte[] result = new byte[packet.getLength()];
            System.arraycopy(buf, 0, result, 0, packet.getLength());
            System.out.println("================DNS Request =====================");
            System.out.println(byte2HexStr(result));
            byte[] dns = dns(result);//dns处理
            if (dns != null) {
                System.out.println("================DNS Response=====================");
                System.out.println(byte2HexStr(dns));
                DatagramPacket sendPacket = new DatagramPacket(dns, dns.length);
                sendPacket.setPort(packet.getPort());
                sendPacket.setAddress(packet.getAddress());
                socket.send(sendPacket);
            }
        }

    }


    private byte[] dns(byte[] result) {
        try {
            DnsParse dnsParse = new DnsParse(byte2HexStr(result).toLowerCase());
            if (dnsParse.parse()) {
                Question question = dnsParse.getQuestionList().get(0);
                List<Answer> answers = new ArrayList<>();
                Answer answer = new Answer();
                answer.setName(question.getName());
                answer.setType("0001");
                answer.setAnswerClass("0001");
                answer.setTime("0000013d");
                answer.setData("192.168.43.1");
                answers.add(answer);

                DnsResponseBuild dnsResponseBuild = new DnsResponseBuild()
                        .setTransactionId(dnsParse.getTransactionId())
                        .setFalgs("1", "0000", "0", "0", "1", "1")
                        .setQuestions(dnsParse.getQuestionList())
                        .setAnswers(answers);
                String build = dnsResponseBuild.build().toLowerCase();
                return hex2Bytes(build);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     * @param bytes
     * @return String
     * @Title: byte2HexStr
     * @Description: 字节数组转成16进制串
     */
    public static String byte2HexStr(byte[] bytes) {
        if (bytes == null) {
            return "";
        }
        int num = bytes.length;
        char[] chars = new char[num * 2];
        int ch;
        for (int index = 0; index < num; ++index) {
            ch = bytes[index];
//			chars[index * 2] = hexDigits[ch >> 4];
//			chars[index * 2 + 1] = hexDigits[ch & 0xF];
            chars[2 * index] = hexDigits[(ch >> 4) & 0x0f];
            chars[2 * index + 1] = hexDigits[ch & 0x0f];
        }
        return new String(chars);
    }

    public static byte[] hex2Bytes(String hexString) {
        if (hexString == null || hexString.equals("")) {
            return null;
        }

        int length = hexString.length() / 2;
        char[] hexChars = hexString.toCharArray();
        byte[] bytes = new byte[length];
        String hexDigits = "0123456789abcdef";
        for (int i = 0; i < length; i++) {
            int pos = i * 2; // 两个字符对应一个byte
            int h = hexDigits.indexOf(hexChars[pos]) << 4; // 注1
            int l = hexDigits.indexOf(hexChars[pos + 1]); // 注2
            if (h == -1 || l == -1) { // 非16进制字符
                return null;
            }
            bytes[i] = (byte) (h | l);
        }
        return bytes;
    }
}
